"""
BMI Calculator Pro - Unified GUI Application
Comprehensive BMI calculator with all advanced features in one interface.
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import numpy as np
from datetime import datetime, timedelta
import threading
import queue

from bmi_engine import BMICalculatorPro


class BMICalculatorProGUI:
    """Unified BMI Calculator Pro with comprehensive features."""
    
    def __init__(self, root):
        """Initialize the BMI Calculator Pro GUI."""
        self.root = root
        self.bmi_engine = BMICalculatorPro()
        self.setup_window()
        self.create_styles()
        self.create_interface()
        self.animate_startup()
        
        # Animation and threading
        self.animation_queue = queue.Queue()
        self.animation_jobs = []
        self.chart_cache = {}
        
    def setup_window(self):
        """Configure the main window."""
        self.root.title("BMI Calculator Pro - Professional Health Analytics")
        self.root.geometry("1400x900")
        self.root.minsize(1200, 800)
        self.root.configure(bg='#f8f9fa')
        
        # Center window
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (self.root.winfo_width() // 2)
        y = (self.root.winfo_screenheight() // 2) - (self.root.winfo_height() // 2)
        self.root.geometry(f"+{x}+{y}")
        
        # Configure window icon (if available)
        try:
            self.root.iconbitmap(default='icon.ico')
        except:
            pass
    
    def create_styles(self):
        """Create custom styles for the application."""
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # Custom styles
        self.style.configure('Title.TLabel', font=('Arial', 20, 'bold'), 
                            foreground='#2c3e50', background='#f8f9fa')
        
        self.style.configure('Heading.TLabel', font=('Arial', 12, 'bold'), 
                            foreground='#2c3e50', background='white')
        
        self.style.configure('Success.TButton', font=('Arial', 11, 'bold'))
        
        self.style.configure('Custom.Treeview', font=('Arial', 10))
        self.style.configure('Custom.Treeview.Heading', font=('Arial', 10, 'bold'))
        
        # Progress bar style
        self.style.configure('BMI.Horizontal.TProgressbar',
                           troughcolor='#ecf0f1',
                           background='#3498db',
                           lightcolor='#3498db',
                           darkcolor='#2980b9')
    
    def create_interface(self):
        """Create the main interface."""
        # Main container
        main_frame = ttk.Frame(self.root, style='Card.TFrame')
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Header
        self.create_header(main_frame)
        
        # Create notebook for different sections
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill='both', expand=True, pady=(20, 0))
        
        # Create all tabs
        self.create_calculator_tab()
        self.create_records_tab()
        self.create_analytics_tab()
        self.create_reports_tab()
        
        # Status bar
        self.create_status_bar(main_frame)
    
    def create_header(self, parent):
        """Create the application header."""
        header_frame = tk.Frame(parent, bg='#f8f9fa', height=80)
        header_frame.pack(fill='x', pady=(0, 10))
        header_frame.pack_propagate(False)
        
        # Left side - Title and subtitle
        left_frame = tk.Frame(header_frame, bg='#f8f9fa')
        left_frame.pack(side='left', fill='y', padx=20)
        
        self.title_label = tk.Label(
            left_frame,
            text="BMI Calculator Pro",
            font=('Arial', 24, 'bold'),
            fg='#2c3e50',
            bg='#f8f9fa'
        )
        self.title_label.pack(anchor='w', pady=(10, 0))
        
        subtitle = tk.Label(
            left_frame,
            text="Professional Health Analytics & BMI Management",
            font=('Arial', 12),
            fg='#7f8c8d',
            bg='#f8f9fa'
        )
        subtitle.pack(anchor='w', pady=(0, 10))
        
        # Right side - Quick stats
        right_frame = tk.Frame(header_frame, bg='#f8f9fa')
        right_frame.pack(side='right', fill='y', padx=20)
        
        self.stats_frame = tk.Frame(right_frame, bg='white', relief='solid', bd=1)
        self.stats_frame.pack(fill='both', expand=True, pady=10)
        
        self.update_header_stats()
    
    def update_header_stats(self):
        """Update header statistics."""
        stats = self.bmi_engine.get_statistics()
        
        # Clear existing stats
        for widget in self.stats_frame.winfo_children():
            widget.destroy()
        
        if stats:
            total_records = stats.get('total_records', 0)
            unique_users = stats.get('unique_users', 0)
            recent_count = stats.get('recent_records_count', 0)
        else:
            total_records = unique_users = recent_count = 0
        
        # Stats display
        stats_label = tk.Label(
            self.stats_frame,
            text="Quick Stats",
            font=('Arial', 10, 'bold'),
            fg='#2c3e50',
            bg='white'
        )
        stats_label.pack(pady=(5, 0))
        
        info_text = f"Records: {total_records} | Users: {unique_users} | Recent: {recent_count}"
        info_label = tk.Label(
            self.stats_frame,
            text=info_text,
            font=('Arial', 9),
            fg='#7f8c8d',
            bg='white'
        )
        info_label.pack(pady=(0, 5))
    
    def create_calculator_tab(self):
        """Create the BMI calculator tab."""
        calc_frame = ttk.Frame(self.notebook)
        self.notebook.add(calc_frame, text="🧮 BMI Calculator")
        
        # Main container with padding
        container = ttk.Frame(calc_frame)
        container.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Left panel - Input form
        left_panel = tk.Frame(container, bg='white', relief='solid', bd=1)
        left_panel.pack(side='left', fill='both', expand=True, padx=(0, 10))
        
        # Form header
        form_header = tk.Frame(left_panel, bg='#3498db', height=50)
        form_header.pack(fill='x')
        form_header.pack_propagate(False)
        
        header_label = tk.Label(
            form_header,
            text="📊 BMI Calculation",
            font=('Arial', 14, 'bold'),
            fg='white',
            bg='#3498db'
        )
        header_label.pack(expand=True)
        
        # Form content
        form_content = tk.Frame(left_panel, bg='white', padx=20, pady=20)
        form_content.pack(fill='both', expand=True)
        
        # Personal Information Section
        personal_frame = tk.LabelFrame(
            form_content, 
            text="Personal Information", 
            font=('Arial', 11, 'bold'),
            bg='white',
            padx=10,
            pady=10
        )\n        personal_frame.pack(fill='x', pady=(0, 15))\n        \n        # Name\n        tk.Label(personal_frame, text=\"Full Name:\", bg='white', \n                font=('Arial', 10)).grid(row=0, column=0, sticky='w', pady=5)\n        self.name_var = tk.StringVar()\n        name_entry = tk.Entry(personal_frame, textvariable=self.name_var, \n                             font=('Arial', 11), width=25)\n        name_entry.grid(row=0, column=1, sticky='ew', padx=(10, 0), pady=5)\n        \n        # Age\n        tk.Label(personal_frame, text=\"Age:\", bg='white', \n                font=('Arial', 10)).grid(row=1, column=0, sticky='w', pady=5)\n        self.age_var = tk.StringVar()\n        age_entry = tk.Entry(personal_frame, textvariable=self.age_var, \n                            font=('Arial', 11), width=25)\n        age_entry.grid(row=1, column=1, sticky='ew', padx=(10, 0), pady=5)\n        \n        # Gender\n        tk.Label(personal_frame, text=\"Gender:\", bg='white', \n                font=('Arial', 10)).grid(row=2, column=0, sticky='w', pady=5)\n        self.gender_var = tk.StringVar(value='Select')\n        gender_combo = ttk.Combobox(personal_frame, textvariable=self.gender_var,\n                                   values=['Male', 'Female', 'Other'], \n                                   state='readonly', width=22)\n        gender_combo.grid(row=2, column=1, sticky='ew', padx=(10, 0), pady=5)\n        \n        personal_frame.columnconfigure(1, weight=1)\n        \n        # Measurements Section\n        measurements_frame = tk.LabelFrame(\n            form_content, \n            text=\"Body Measurements\", \n            font=('Arial', 11, 'bold'),\n            bg='white',\n            padx=10,\n            pady=10\n        )\n        measurements_frame.pack(fill='x', pady=(0, 15))\n        \n        # Weight\n        weight_frame = tk.Frame(measurements_frame, bg='white')\n        weight_frame.grid(row=0, column=0, columnspan=3, sticky='ew', pady=5)\n        \n        tk.Label(weight_frame, text=\"Weight:\", bg='white', \n                font=('Arial', 10)).pack(side='left')\n        \n        self.weight_var = tk.StringVar()\n        weight_entry = tk.Entry(weight_frame, textvariable=self.weight_var, \n                               font=('Arial', 11), width=15)\n        weight_entry.pack(side='left', padx=(10, 5))\n        \n        self.weight_unit_var = tk.StringVar(value='kg')\n        weight_unit_combo = ttk.Combobox(weight_frame, textvariable=self.weight_unit_var,\n                                        values=['kg', 'lbs', 'stone'], \n                                        state='readonly', width=8)\n        weight_unit_combo.pack(side='left')\n        \n        # Height\n        height_frame = tk.Frame(measurements_frame, bg='white')\n        height_frame.grid(row=1, column=0, columnspan=3, sticky='ew', pady=5)\n        \n        tk.Label(height_frame, text=\"Height:\", bg='white', \n                font=('Arial', 10)).pack(side='left')\n        \n        self.height_var = tk.StringVar()\n        height_entry = tk.Entry(height_frame, textvariable=self.height_var, \n                               font=('Arial', 11), width=15)\n        height_entry.pack(side='left', padx=(10, 5))\n        \n        self.height_unit_var = tk.StringVar(value='m')\n        height_unit_combo = ttk.Combobox(height_frame, textvariable=self.height_unit_var,\n                                        values=['m', 'cm', 'ft', 'in'], \n                                        state='readonly', width=8)\n        height_unit_combo.pack(side='left')\n        \n        measurements_frame.columnconfigure(0, weight=1)\n        \n        # Action buttons\n        button_frame = tk.Frame(form_content, bg='white')\n        button_frame.pack(fill='x', pady=(15, 0))\n        \n        self.calc_button = tk.Button(\n            button_frame,\n            text=\"🧮 Calculate BMI\",\n            font=('Arial', 12, 'bold'),\n            bg='#2ecc71',\n            fg='white',\n            activebackground='#27ae60',\n            activeforeground='white',\n            relief='flat',\n            padx=30,\n            pady=12,\n            cursor='hand2',\n            command=self.calculate_bmi\n        )\n        self.calc_button.pack(side='left', padx=(0, 10))\n        \n        clear_button = tk.Button(\n            button_frame,\n            text=\"🗑️ Clear\",\n            font=('Arial', 12, 'bold'),\n            bg='#e74c3c',\n            fg='white',\n            activebackground='#c0392b',\n            activeforeground='white',\n            relief='flat',\n            padx=30,\n            pady=12,\n            cursor='hand2',\n            command=self.clear_form\n        )\n        clear_button.pack(side='left')\n        \n        # Right panel - Results and visualization\n        right_panel = tk.Frame(container, bg='white', relief='solid', bd=1)\n        right_panel.pack(side='right', fill='both', expand=True)\n        \n        # Results header\n        results_header = tk.Frame(right_panel, bg='#e74c3c', height=50)\n        results_header.pack(fill='x')\n        results_header.pack_propagate(False)\n        \n        results_header_label = tk.Label(\n            results_header,\n            text=\"📋 Results & Analysis\",\n            font=('Arial', 14, 'bold'),\n            fg='white',\n            bg='#e74c3c'\n        )\n        results_header_label.pack(expand=True)\n        \n        # Results content\n        self.results_content = tk.Frame(right_panel, bg='white', padx=20, pady=20)\n        self.results_content.pack(fill='both', expand=True)\n        \n        # BMI Gauge\n        gauge_frame = tk.Frame(self.results_content, bg='white')\n        gauge_frame.pack(fill='x', pady=(0, 20))\n        \n        tk.Label(\n            gauge_frame,\n            text=\"BMI Gauge\",\n            font=('Arial', 12, 'bold'),\n            bg='white'\n        ).pack(anchor='w')\n        \n        self.bmi_progress = ttk.Progressbar(\n            gauge_frame,\n            orient='horizontal',\n            mode='determinate',\n            maximum=50,\n            length=400,\n            style='BMI.Horizontal.TProgressbar'\n        )\n        self.bmi_progress.pack(fill='x', pady=5)\n        \n        # BMI categories reference\n        categories_frame = tk.Frame(gauge_frame, bg='white')\n        categories_frame.pack(fill='x', pady=(5, 0))\n        \n        categories = [\n            (\"Severe\", \"#8e44ad\"), (\"Under\", \"#3498db\"), (\"Normal\", \"#2ecc71\"),\n            (\"Over\", \"#f39c12\"), (\"Obese I\", \"#e67e22\"), (\"Obese II\", \"#e74c3c\"), (\"Obese III\", \"#c0392b\")\n        ]\n        \n        for name, color in categories:\n            label = tk.Label(\n                categories_frame,\n                text=name,\n                font=('Arial', 8),\n                fg=color,\n                bg='white'\n            )\n            label.pack(side='left', expand=True)\n        \n        # Results display area\n        self.results_display = tk.Frame(self.results_content, bg='white')\n        self.results_display.pack(fill='both', expand=True)\n        \n        # Initialize with welcome message\n        welcome_label = tk.Label(\n            self.results_display,\n            text=\"Enter your information and click Calculate BMI\\nto get comprehensive health analysis\",\n            font=('Arial', 12),\n            fg='#7f8c8d',\n            bg='white',\n            justify='center'\n        )\n        welcome_label.pack(expand=True)\n    \n    def create_records_tab(self):\n        \"\"\"Create the records management tab.\"\"\"\n        records_frame = ttk.Frame(self.notebook)\n        self.notebook.add(records_frame, text=\"📋 Health Records\")\n        \n        # Container\n        container = ttk.Frame(records_frame)\n        container.pack(fill='both', expand=True, padx=20, pady=20)\n        \n        # Controls\n        controls_frame = ttk.Frame(container)\n        controls_frame.pack(fill='x', pady=(0, 15))\n        \n        # Search and filter\n        search_frame = ttk.Frame(controls_frame)\n        search_frame.pack(side='left')\n        \n        ttk.Label(search_frame, text=\"Search:\").pack(side='left')\n        self.search_var = tk.StringVar()\n        search_entry = ttk.Entry(search_frame, textvariable=self.search_var, width=20)\n        search_entry.pack(side='left', padx=(5, 10))\n        search_entry.bind('<KeyRelease>', self.filter_records)\n        \n        # Action buttons\n        button_frame = ttk.Frame(controls_frame)\n        button_frame.pack(side='right')\n        \n        ttk.Button(button_frame, text=\"🔄 Refresh\", \n                  command=self.refresh_records).pack(side='left', padx=(0, 5))\n        ttk.Button(button_frame, text=\"📊 Export CSV\", \n                  command=self.export_csv).pack(side='left', padx=(0, 5))\n        ttk.Button(button_frame, text=\"🗑️ Delete Selected\", \n                  command=self.delete_selected).pack(side='left')\n        \n        # Records treeview\n        tree_frame = ttk.Frame(container)\n        tree_frame.pack(fill='both', expand=True)\n        \n        columns = ('Date', 'Name', 'Age', 'Gender', 'Weight', 'Height', 'BMI', 'Category', 'Risk')\n        self.records_tree = ttk.Treeview(tree_frame, columns=columns, show='headings',\n                                       style='Custom.Treeview')\n        \n        # Configure columns\n        column_widths = {\n            'Date': 100, 'Name': 120, 'Age': 60, 'Gender': 80,\n            'Weight': 80, 'Height': 80, 'BMI': 60, 'Category': 120, 'Risk': 80\n        }\n        \n        for col in columns:\n            self.records_tree.heading(col, text=col, command=lambda c=col: self.sort_records(c))\n            self.records_tree.column(col, width=column_widths.get(col, 100))\n        \n        # Scrollbars\n        v_scrollbar = ttk.Scrollbar(tree_frame, orient='vertical', \n                                  command=self.records_tree.yview)\n        h_scrollbar = ttk.Scrollbar(tree_frame, orient='horizontal', \n                                  command=self.records_tree.xview)\n        \n        self.records_tree.configure(yscrollcommand=v_scrollbar.set, \n                                  xscrollcommand=h_scrollbar.set)\n        \n        # Pack treeview and scrollbars\n        self.records_tree.pack(side='left', fill='both', expand=True)\n        v_scrollbar.pack(side='right', fill='y')\n        \n        # Load initial records\n        self.refresh_records()\n    \n    def create_analytics_tab(self):\n        \"\"\"Create the analytics and visualization tab.\"\"\"\n        analytics_frame = ttk.Frame(self.notebook)\n        self.notebook.add(analytics_frame, text=\"📈 Analytics\")\n        \n        # Container\n        container = ttk.Frame(analytics_frame)\n        container.pack(fill='both', expand=True, padx=10, pady=10)\n        \n        # Controls\n        controls_frame = ttk.Frame(container)\n        controls_frame.pack(fill='x', pady=(0, 10))\n        \n        # Chart type selection\n        ttk.Label(controls_frame, text=\"Visualization:\").pack(side='left')\n        self.chart_type_var = tk.StringVar(value='BMI Distribution')\n        chart_combo = ttk.Combobox(controls_frame, textvariable=self.chart_type_var,\n                                 values=['BMI Distribution', 'BMI Trends', 'Category Analysis',\n                                        'Age vs BMI', 'Gender Comparison', 'Risk Assessment'],\n                                 state='readonly', width=20)\n        chart_combo.pack(side='left', padx=(5, 20))\n        \n        # Filter options\n        ttk.Label(controls_frame, text=\"Filter by:\").pack(side='left')\n        self.filter_var = tk.StringVar(value='All Records')\n        filter_combo = ttk.Combobox(controls_frame, textvariable=self.filter_var,\n                                  values=['All Records', 'Last 30 Days', 'Last 90 Days', 'This Year'],\n                                  state='readonly', width=15)\n        filter_combo.pack(side='left', padx=(5, 20))\n        \n        # Action buttons\n        ttk.Button(controls_frame, text=\"📊 Generate Chart\", \n                  command=self.generate_chart).pack(side='left', padx=(0, 5))\n        ttk.Button(controls_frame, text=\"💾 Save Chart\", \n                  command=self.save_chart).pack(side='left', padx=(0, 5))\n        ttk.Button(controls_frame, text=\"🔄 Refresh\", \n                  command=self.refresh_chart).pack(side='left')\n        \n        # Chart display area\n        chart_frame = ttk.LabelFrame(container, text=\"Data Visualization\")\n        chart_frame.pack(fill='both', expand=True)\n        \n        # Create matplotlib figure\n        self.fig = Figure(figsize=(12, 8), dpi=100, facecolor='white')\n        self.canvas = FigureCanvasTkAgg(self.fig, chart_frame)\n        self.canvas.get_tk_widget().pack(fill='both', expand=True, padx=10, pady=10)\n        \n        # Generate initial chart\n        self.generate_chart()\n    \n    def create_reports_tab(self):\n        \"\"\"Create the reports tab.\"\"\"\n        reports_frame = ttk.Frame(self.notebook)\n        self.notebook.add(reports_frame, text=\"📄 Reports\")\n        \n        # Container\n        container = ttk.Frame(reports_frame)\n        container.pack(fill='both', expand=True, padx=20, pady=20)\n        \n        # Controls\n        controls_frame = ttk.LabelFrame(container, text=\"Report Generator\")\n        controls_frame.pack(fill='x', pady=(0, 15))\n        \n        controls_inner = ttk.Frame(controls_frame)\n        controls_inner.pack(fill='x', padx=10, pady=10)\n        \n        # Report type\n        ttk.Label(controls_inner, text=\"Report Type:\").grid(row=0, column=0, sticky='w', padx=(0, 5))\n        self.report_type_var = tk.StringVar(value='Comprehensive Report')\n        report_combo = ttk.Combobox(controls_inner, textvariable=self.report_type_var,\n                                  values=['Comprehensive Report', 'User Summary', \n                                         'Statistical Analysis', 'Health Trends'],\n                                  state='readonly', width=20)\n        report_combo.grid(row=0, column=1, sticky='ew', padx=(0, 10))\n        \n        # User filter\n        ttk.Label(controls_inner, text=\"User Filter:\").grid(row=0, column=2, sticky='w', padx=(10, 5))\n        self.report_user_var = tk.StringVar(value='All Users')\n        self.report_user_combo = ttk.Combobox(controls_inner, textvariable=self.report_user_var,\n                                            state='readonly', width=15)\n        self.report_user_combo.grid(row=0, column=3, sticky='ew', padx=(0, 10))\n        \n        # Generate button\n        ttk.Button(controls_inner, text=\"📄 Generate Report\", \n                  command=self.generate_report).grid(row=0, column=4, padx=(10, 0))\n        \n        controls_inner.columnconfigure(1, weight=1)\n        controls_inner.columnconfigure(3, weight=1)\n        \n        # Report display\n        report_frame = ttk.LabelFrame(container, text=\"Report Output\")\n        report_frame.pack(fill='both', expand=True)\n        \n        # Text area with scrollbar\n        text_frame = ttk.Frame(report_frame)\n        text_frame.pack(fill='both', expand=True, padx=10, pady=10)\n        \n        self.report_text = scrolledtext.ScrolledText(\n            text_frame, \n            wrap=tk.WORD, \n            font=('Consolas', 10),\n            state='disabled'\n        )\n        self.report_text.pack(fill='both', expand=True)\n        \n        # Export buttons\n        export_frame = ttk.Frame(report_frame)\n        export_frame.pack(fill='x', padx=10, pady=(0, 10))\n        \n        ttk.Button(export_frame, text=\"💾 Save Report\", \n                  command=self.save_report).pack(side='left', padx=(0, 5))\n        ttk.Button(export_frame, text=\"📧 Email Report\", \n                  command=self.email_report).pack(side='left', padx=(0, 5))\n        ttk.Button(export_frame, text=\"🖨️ Print Report\", \n                  command=self.print_report).pack(side='left')\n        \n        # Update user list\n        self.update_report_users()\n        \n        # Generate initial report\n        self.generate_report()\n    \n    def create_status_bar(self, parent):\n        \"\"\"Create the status bar.\"\"\"\n        self.status_bar = tk.Frame(parent, bg='#34495e', height=25)\n        self.status_bar.pack(fill='x', side='bottom')\n        self.status_bar.pack_propagate(False)\n        \n        self.status_label = tk.Label(\n            self.status_bar,\n            text=\"Ready - BMI Calculator Pro\",\n            bg='#34495e',\n            fg='white',\n            font=('Arial', 9),\n            anchor='w'\n        )\n        self.status_label.pack(side='left', padx=10, fill='y')\n        \n        # Version info\n        version_label = tk.Label(\n            self.status_bar,\n            text=\"v2.0 Pro\",\n            bg='#34495e',\n            fg='#bdc3c7',\n            font=('Arial', 9)\n        )\n        version_label.pack(side='right', padx=10)\n    \n    def update_status(self, message):\n        \"\"\"Update status bar message.\"\"\"\n        self.status_label.config(text=message)\n        self.root.update_idletasks()\n    \n    def animate_startup(self):\n        \"\"\"Animate application startup.\"\"\"\n        # Start with window slightly transparent\n        self.root.attributes('-alpha', 0.0)\n        self._fade_in(0.0)\n    \n    def _fade_in(self, alpha):\n        \"\"\"Fade in animation.\"\"\"\n        if alpha < 1.0:\n            alpha += 0.05\n            self.root.attributes('-alpha', alpha)\n            self.root.after(20, lambda: self._fade_in(alpha))\n        else:\n            self.root.attributes('-alpha', 1.0)\n    \n    # Calculator Functions\n    def calculate_bmi(self):\n        \"\"\"Calculate BMI with comprehensive analysis.\"\"\"\n        try:\n            # Get input values\n            name = self.name_var.get().strip()\n            age_str = self.age_var.get().strip()\n            gender = self.gender_var.get()\n            weight_str = self.weight_var.get().strip()\n            height_str = self.height_var.get().strip()\n            weight_unit = self.weight_unit_var.get()\n            height_unit = self.height_unit_var.get()\n            \n            # Validation\n            if not all([name, age_str, weight_str, height_str]):\n                messagebox.showwarning(\"Missing Information\", \n                                     \"Please fill in all required fields.\")\n                return\n            \n            if gender == 'Select':\n                messagebox.showwarning(\"Missing Information\", \n                                     \"Please select your gender.\")\n                return\n            \n            # Convert inputs\n            try:\n                age = int(age_str)\n                weight = float(weight_str)\n                height = float(height_str)\n            except ValueError:\n                messagebox.showerror(\"Invalid Input\", \n                                   \"Please enter valid numbers for age, weight, and height.\")\n                return\n            \n            # Validate ranges\n            if age < 1 or age > 120:\n                messagebox.showerror(\"Invalid Age\", \n                                   \"Age must be between 1 and 120 years.\")\n                return\n            \n            # Validate measurements\n            is_valid, error_msg = self.bmi_engine.validate_input(weight, height, weight_unit, height_unit)\n            if not is_valid:\n                messagebox.showerror(\"Invalid Measurements\", error_msg)\n                return\n            \n            # Calculate BMI\n            bmi = self.bmi_engine.calculate_bmi(weight, height, weight_unit, height_unit)\n            analysis = self.bmi_engine.get_bmi_analysis(bmi)\n            \n            # Save record\n            success = self.bmi_engine.save_record(name, age, gender, weight, height, weight_unit, height_unit)\n            \n            # Display results\n            self.display_results(bmi, analysis, weight, height, weight_unit, height_unit)\n            \n            # Update UI\n            self.update_header_stats()\n            \n            # Show success message\n            if success:\n                self.update_status(f\"BMI calculated and saved: {bmi:.1f} ({analysis['category_name']})\")\n                messagebox.showinfo(\"Success\", \n                                  f\"BMI calculated: {bmi:.1f}\\nCategory: {analysis['category_name']}\\nRecord saved successfully!\")\n            else:\n                self.update_status(f\"BMI calculated: {bmi:.1f} ({analysis['category_name']}) - Save failed\")\n                messagebox.showwarning(\"Calculation Complete\", \n                                     f\"BMI calculated: {bmi:.1f}\\nCategory: {analysis['category_name']}\\n\\nNote: Failed to save record.\")\n            \n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"An unexpected error occurred: {str(e)}\")\n            self.update_status(\"Error during BMI calculation\")\n    \n    def display_results(self, bmi, analysis, weight, height, weight_unit, height_unit):\n        \"\"\"Display comprehensive BMI results.\"\"\"\n        # Clear previous results\n        for widget in self.results_display.winfo_children():\n            widget.destroy()\n        \n        # Animate BMI gauge\n        self.animate_bmi_gauge(bmi)\n        \n        # BMI Value display\n        bmi_frame = tk.Frame(self.results_display, bg='white')\n        bmi_frame.pack(fill='x', pady=(0, 15))\n        \n        bmi_card = tk.Frame(bmi_frame, bg=analysis['color'], relief='solid', bd=2)\n        bmi_card.pack(fill='x', padx=20)\n        \n        bmi_inner = tk.Frame(bmi_card, bg=analysis['color'], padx=20, pady=15)\n        bmi_inner.pack(fill='x')\n        \n        # BMI value\n        bmi_label = tk.Label(\n            bmi_inner,\n            text=f\"BMI: {bmi:.1f}\",\n            font=('Arial', 24, 'bold'),\n            fg='white',\n            bg=analysis['color']\n        )\n        bmi_label.pack()\n        \n        # Category\n        category_label = tk.Label(\n            bmi_inner,\n            text=f\"{analysis['emoji']} {analysis['category_name']}\",\n            font=('Arial', 16, 'bold'),\n            fg='white',\n            bg=analysis['color']\n        )\n        category_label.pack()\n        \n        # Risk level\n        risk_label = tk.Label(\n            bmi_inner,\n            text=f\"Risk Level: {analysis['risk_level']}\",\n            font=('Arial', 12),\n            fg='white',\n            bg=analysis['color']\n        )\n        risk_label.pack(pady=(5, 0))\n        \n        # Health advice\n        advice_frame = tk.Frame(self.results_display, bg='white')\n        advice_frame.pack(fill='both', expand=True, padx=20, pady=(0, 10))\n        \n        advice_header = tk.Label(\n            advice_frame,\n            text=\"💡 Health Advice\",\n            font=('Arial', 12, 'bold'),\n            bg='white',\n            anchor='w'\n        )\n        advice_header.pack(fill='x', pady=(0, 5))\n        \n        advice_text = tk.Text(\n            advice_frame,\n            height=4,\n            wrap=tk.WORD,\n            font=('Arial', 11),\n            bg='#f8f9fa',\n            fg='#2c3e50',\n            relief='flat',\n            state='disabled'\n        )\n        advice_text.pack(fill='both', expand=True)\n        \n        # Insert advice with animation\n        advice_text.configure(state='normal')\n        advice_text.insert('1.0', analysis['advice'])\n        advice_text.configure(state='disabled')\n        \n        # Additional information\n        info_frame = tk.Frame(self.results_display, bg='white')\n        info_frame.pack(fill='x', padx=20)\n        \n        # Calculate ideal weight range\n        height_m = self.bmi_engine.convert_units(height, height_unit, 'm', 'height')\n        ideal_min = 18.5 * (height_m ** 2)\n        ideal_max = 24.9 * (height_m ** 2)\n        \n        ideal_min_display = self.bmi_engine.convert_units(ideal_min, 'kg', weight_unit, 'weight')\n        ideal_max_display = self.bmi_engine.convert_units(ideal_max, 'kg', weight_unit, 'weight')\n        \n        info_text = f\"Ideal weight range: {ideal_min_display:.1f} - {ideal_max_display:.1f} {weight_unit}\"\n        \n        info_label = tk.Label(\n            info_frame,\n            text=info_text,\n            font=('Arial', 10),\n            bg='white',\n            fg='#7f8c8d'\n        )\n        info_label.pack(pady=5)\n    \n    def animate_bmi_gauge(self, bmi):\n        \"\"\"Animate BMI gauge to target value.\"\"\"\n        target = max(0, min(50, float(bmi)))\n        \n        def animate(current=0):\n            if current < target:\n                current += target / 30  # 30 animation steps\n                self.bmi_progress['value'] = current\n                self.root.after(50, lambda: animate(current))\n            else:\n                self.bmi_progress['value'] = target\n        \n        animate()\n    \n    def clear_form(self):\n        \"\"\"Clear all form fields.\"\"\"\n        self.name_var.set(\"\")\n        self.age_var.set(\"\")\n        self.gender_var.set(\"Select\")\n        self.weight_var.set(\"\")\n        self.height_var.set(\"\")\n        self.bmi_progress['value'] = 0\n        \n        # Clear results\n        for widget in self.results_display.winfo_children():\n            widget.destroy()\n        \n        welcome_label = tk.Label(\n            self.results_display,\n            text=\"Enter your information and click Calculate BMI\\nto get comprehensive health analysis\",\n            font=('Arial', 12),\n            fg='#7f8c8d',\n            bg='white',\n            justify='center'\n        )\n        welcome_label.pack(expand=True)\n        \n        self.update_status(\"Form cleared\")\n    \n    # Records Management\n    def refresh_records(self):\n        \"\"\"Refresh the records display.\"\"\"\n        # Clear existing items\n        for item in self.records_tree.get_children():\n            self.records_tree.delete(item)\n        \n        # Load records\n        records = self.bmi_engine.load_records()\n        \n        # Sort by timestamp (newest first)\n        records.sort(key=lambda x: x['timestamp'], reverse=True)\n        \n        # Insert records\n        for record in records:\n            date = record['timestamp'][:10]\n            name = record.get('name', 'Unknown')\n            age = record.get('age', 'N/A')\n            gender = record.get('gender', 'N/A')\n            weight = f\"{record.get('weight_input', record.get('weight_kg', 0)):.1f} {record.get('weight_unit', 'kg')}\"\n            height = f\"{record.get('height_input', record.get('height_m', 0)):.1f} {record.get('height_unit', 'm')}\"\n            bmi = f\"{record['bmi']:.1f}\"\n            category = record.get('category_name', 'Unknown')\n            risk = record.get('risk_level', 'Unknown')\n            \n            self.records_tree.insert('', 'end', values=(\n                date, name, age, gender, weight, height, bmi, category, risk\n            ))\n        \n        self.update_status(f\"Loaded {len(records)} records\")\n    \n    def filter_records(self, event=None):\n        \"\"\"Filter records based on search criteria.\"\"\"\n        search_term = self.search_var.get().lower()\n        \n        # Clear existing items\n        for item in self.records_tree.get_children():\n            self.records_tree.delete(item)\n        \n        # Load and filter records\n        records = self.bmi_engine.load_records()\n        filtered_records = []\n        \n        for record in records:\n            # Search in name, category, and risk level\n            searchable_text = (\n                record.get('name', '') + ' ' +\n                record.get('category_name', '') + ' ' +\n                record.get('risk_level', '')\n            ).lower()\n            \n            if search_term in searchable_text:\n                filtered_records.append(record)\n        \n        # Sort and display filtered records\n        filtered_records.sort(key=lambda x: x['timestamp'], reverse=True)\n        \n        for record in filtered_records:\n            date = record['timestamp'][:10]\n            name = record.get('name', 'Unknown')\n            age = record.get('age', 'N/A')\n            gender = record.get('gender', 'N/A')\n            weight = f\"{record.get('weight_input', record.get('weight_kg', 0)):.1f} {record.get('weight_unit', 'kg')}\"\n            height = f\"{record.get('height_input', record.get('height_m', 0)):.1f} {record.get('height_unit', 'm')}\"\n            bmi = f\"{record['bmi']:.1f}\"\n            category = record.get('category_name', 'Unknown')\n            risk = record.get('risk_level', 'Unknown')\n            \n            self.records_tree.insert('', 'end', values=(\n                date, name, age, gender, weight, height, bmi, category, risk\n            ))\n        \n        self.update_status(f\"Showing {len(filtered_records)} of {len(records)} records\")\n    \n    def sort_records(self, column):\n        \"\"\"Sort records by column.\"\"\"\n        # This is a placeholder for sort functionality\n        self.update_status(f\"Sorting by {column}\")\n    \n    def delete_selected(self):\n        \"\"\"Delete selected record.\"\"\"\n        selected = self.records_tree.selection()\n        if not selected:\n            messagebox.showwarning(\"No Selection\", \"Please select a record to delete.\")\n            return\n        \n        if messagebox.askyesno(\"Confirm Delete\", \"Are you sure you want to delete the selected record?\"):\n            # This would need record ID implementation\n            self.update_status(\"Record deletion functionality to be implemented\")\n            messagebox.showinfo(\"Note\", \"Record deletion functionality is being implemented.\")\n    \n    def export_csv(self):\n        \"\"\"Export records to CSV file.\"\"\"\n        records = self.bmi_engine.load_records()\n        if not records:\n            messagebox.showinfo(\"No Data\", \"No records available to export.\")\n            return\n        \n        filename = filedialog.asksaveasfilename(\n            defaultextension=\".csv\",\n            filetypes=[(\"CSV files\", \"*.csv\"), (\"All files\", \"*.*\")],\n            title=\"Export Records\"\n        )\n        \n        if filename:\n            try:\n                csv_data = self.bmi_engine.export_data('csv', records)\n                with open(filename, 'w', newline='', encoding='utf-8') as f:\n                    f.write(csv_data)\n                \n                messagebox.showinfo(\"Export Complete\", f\"Records exported to {filename}\")\n                self.update_status(f\"Exported {len(records)} records to CSV\")\n            except Exception as e:\n                messagebox.showerror(\"Export Error\", f\"Failed to export records: {str(e)}\")\n    \n    # Analytics Functions\n    def generate_chart(self):\n        \"\"\"Generate selected chart type.\"\"\"\n        chart_type = self.chart_type_var.get()\n        filter_type = self.filter_var.get()\n        \n        # Clear previous chart\n        self.fig.clear()\n        \n        # Load records with filter\n        records = self.get_filtered_records(filter_type)\n        \n        if not records:\n            ax = self.fig.add_subplot(111)\n            ax.text(0.5, 0.5, 'No data available for the selected filter',\n                   ha='center', va='center', transform=ax.transAxes,\n                   fontsize=14, color='gray')\n            ax.set_title('No Data Available')\n            self.canvas.draw()\n            return\n        \n        try:\n            if chart_type == 'BMI Distribution':\n                self.create_bmi_distribution_chart(records)\n            elif chart_type == 'BMI Trends':\n                self.create_bmi_trends_chart(records)\n            elif chart_type == 'Category Analysis':\n                self.create_category_analysis_chart(records)\n            elif chart_type == 'Age vs BMI':\n                self.create_age_bmi_chart(records)\n            elif chart_type == 'Gender Comparison':\n                self.create_gender_comparison_chart(records)\n            elif chart_type == 'Risk Assessment':\n                self.create_risk_assessment_chart(records)\n            \n            self.fig.tight_layout()\n            self.canvas.draw()\n            self.update_status(f\"Generated {chart_type} chart with {len(records)} records\")\n            \n        except Exception as e:\n            messagebox.showerror(\"Chart Error\", f\"Failed to generate chart: {str(e)}\")\n            self.update_status(\"Chart generation failed\")\n    \n    def get_filtered_records(self, filter_type):\n        \"\"\"Get records based on filter type.\"\"\"\n        all_records = self.bmi_engine.load_records()\n        \n        if filter_type == 'All Records':\n            return all_records\n        \n        now = datetime.now()\n        if filter_type == 'Last 30 Days':\n            cutoff = now - timedelta(days=30)\n        elif filter_type == 'Last 90 Days':\n            cutoff = now - timedelta(days=90)\n        elif filter_type == 'This Year':\n            cutoff = now.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)\n        else:\n            return all_records\n        \n        return [r for r in all_records \n                if datetime.fromisoformat(r['timestamp']) > cutoff]\n    \n    def create_bmi_distribution_chart(self, records):\n        \"\"\"Create BMI distribution histogram.\"\"\"\n        bmis = [r['bmi'] for r in records]\n        \n        ax = self.fig.add_subplot(111)\n        n, bins, patches = ax.hist(bmis, bins=20, edgecolor='black', alpha=0.7)\n        \n        # Color bars by BMI category\n        for i, (patch, bin_center) in enumerate(zip(patches, (bins[:-1] + bins[1:]) / 2)):\n            if bin_center < 16:\n                patch.set_facecolor('#8e44ad')\n            elif bin_center < 18.5:\n                patch.set_facecolor('#3498db')\n            elif bin_center < 25:\n                patch.set_facecolor('#2ecc71')\n            elif bin_center < 30:\n                patch.set_facecolor('#f39c12')\n            elif bin_center < 35:\n                patch.set_facecolor('#e67e22')\n            elif bin_center < 40:\n                patch.set_facecolor('#e74c3c')\n            else:\n                patch.set_facecolor('#c0392b')\n        \n        ax.set_xlabel('BMI Value', fontsize=12)\n        ax.set_ylabel('Frequency', fontsize=12)\n        ax.set_title('BMI Distribution', fontsize=14, fontweight='bold')\n        ax.grid(True, alpha=0.3)\n        \n        # Add statistics\n        mean_bmi = np.mean(bmis)\n        ax.axvline(mean_bmi, color='red', linestyle='--', alpha=0.8, \n                  label=f'Mean: {mean_bmi:.1f}')\n        ax.legend()\n    \n    def create_bmi_trends_chart(self, records):\n        \"\"\"Create BMI trends over time.\"\"\"\n        if len(records) < 2:\n            ax = self.fig.add_subplot(111)\n            ax.text(0.5, 0.5, 'Insufficient data for trend analysis\\n(Need at least 2 records)',\n                   ha='center', va='center', transform=ax.transAxes, fontsize=14)\n            return\n        \n        # Group by user\n        user_data = {}\n        for record in records:\n            name = record.get('name', 'Unknown')\n            if name not in user_data:\n                user_data[name] = []\n            user_data[name].append(record)\n        \n        ax = self.fig.add_subplot(111)\n        \n        colors = plt.cm.tab10(np.linspace(0, 1, len(user_data)))\n        \n        for i, (name, user_records) in enumerate(user_data.items()):\n            if len(user_records) >= 2:  # Only plot users with multiple records\n                sorted_records = sorted(user_records, key=lambda x: x['timestamp'])\n                dates = [datetime.fromisoformat(r['timestamp']) for r in sorted_records]\n                bmis = [r['bmi'] for r in sorted_records]\n                \n                ax.plot(dates, bmis, marker='o', label=name, color=colors[i], linewidth=2)\n        \n        ax.set_xlabel('Date', fontsize=12)\n        ax.set_ylabel('BMI', fontsize=12)\n        ax.set_title('BMI Trends Over Time', fontsize=14, fontweight='bold')\n        ax.grid(True, alpha=0.3)\n        ax.legend()\n        \n        # Format x-axis\n        plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)\n    \n    def create_category_analysis_chart(self, records):\n        \"\"\"Create BMI category distribution pie chart.\"\"\"\n        categories = {}\n        for record in records:\n            cat = record.get('category_name', 'Unknown')\n            categories[cat] = categories.get(cat, 0) + 1\n        \n        if not categories:\n            return\n        \n        ax = self.fig.add_subplot(111)\n        \n        colors = ['#8e44ad', '#3498db', '#2ecc71', '#f39c12', '#e67e22', '#e74c3c', '#c0392b']\n        \n        wedges, texts, autotexts = ax.pie(\n            categories.values(), \n            labels=categories.keys(), \n            colors=colors[:len(categories)],\n            autopct='%1.1f%%',\n            startangle=90\n        )\n        \n        ax.set_title('BMI Category Distribution', fontsize=14, fontweight='bold')\n    \n    def create_age_bmi_chart(self, records):\n        \"\"\"Create Age vs BMI scatter plot.\"\"\"\n        ages = [r.get('age', 0) for r in records if r.get('age')]\n        bmis = [r['bmi'] for r in records if r.get('age')]\n        \n        if not ages:\n            ax = self.fig.add_subplot(111)\n            ax.text(0.5, 0.5, 'No age data available',\n                   ha='center', va='center', transform=ax.transAxes, fontsize=14)\n            return\n        \n        ax = self.fig.add_subplot(111)\n        ax.scatter(ages, bmis, alpha=0.6, s=50, edgecolors='black')\n        \n        ax.set_xlabel('Age (years)', fontsize=12)\n        ax.set_ylabel('BMI', fontsize=12)\n        ax.set_title('Age vs BMI Relationship', fontsize=14, fontweight='bold')\n        ax.grid(True, alpha=0.3)\n        \n        # Add BMI category lines\n        ax.axhline(y=18.5, color='blue', linestyle='--', alpha=0.5, label='Underweight')\n        ax.axhline(y=25, color='green', linestyle='--', alpha=0.5, label='Normal')\n        ax.axhline(y=30, color='orange', linestyle='--', alpha=0.5, label='Overweight')\n        ax.legend()\n    \n    def create_gender_comparison_chart(self, records):\n        \"\"\"Create gender comparison chart.\"\"\"\n        gender_data = {}\n        for record in records:\n            gender = record.get('gender', 'Unknown')\n            if gender not in gender_data:\n                gender_data[gender] = []\n            gender_data[gender].append(record['bmi'])\n        \n        if len(gender_data) < 2:\n            ax = self.fig.add_subplot(111)\n            ax.text(0.5, 0.5, 'Insufficient gender data for comparison',\n                   ha='center', va='center', transform=ax.transAxes, fontsize=14)\n            return\n        \n        ax = self.fig.add_subplot(111)\n        \n        genders = list(gender_data.keys())\n        bmi_data = [gender_data[gender] for gender in genders]\n        \n        box_plot = ax.boxplot(bmi_data, labels=genders, patch_artist=True)\n        \n        colors = ['lightblue', 'lightpink', 'lightgreen']\n        for patch, color in zip(box_plot['boxes'], colors[:len(genders)]):\n            patch.set_facecolor(color)\n        \n        ax.set_ylabel('BMI', fontsize=12)\n        ax.set_title('BMI Distribution by Gender', fontsize=14, fontweight='bold')\n        ax.grid(True, alpha=0.3)\n    \n    def create_risk_assessment_chart(self, records):\n        \"\"\"Create risk assessment chart.\"\"\"\n        risk_data = {}\n        for record in records:\n            risk = record.get('risk_level', 'Unknown')\n            risk_data[risk] = risk_data.get(risk, 0) + 1\n        \n        ax = self.fig.add_subplot(111)\n        \n        risks = list(risk_data.keys())\n        counts = list(risk_data.values())\n        \n        colors = {'Low': '#2ecc71', 'Moderate': '#f39c12', 'High': '#e67e22', \n                 'Very High': '#e74c3c', 'Extreme': '#c0392b'}\n        bar_colors = [colors.get(risk, '#95a5a6') for risk in risks]\n        \n        bars = ax.bar(risks, counts, color=bar_colors, alpha=0.8, edgecolor='black')\n        \n        ax.set_ylabel('Number of Records', fontsize=12)\n        ax.set_title('Health Risk Assessment Distribution', fontsize=14, fontweight='bold')\n        \n        # Add value labels on bars\n        for bar in bars:\n            height = bar.get_height()\n            ax.text(bar.get_x() + bar.get_width()/2., height + 0.1,\n                   f'{int(height)}', ha='center', va='bottom')\n        \n        plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)\n    \n    def refresh_chart(self):\n        \"\"\"Refresh the current chart.\"\"\"\n        self.generate_chart()\n    \n    def save_chart(self):\n        \"\"\"Save the current chart.\"\"\"\n        if not self.fig.axes:\n            messagebox.showwarning(\"No Chart\", \"Please generate a chart first.\")\n            return\n        \n        filename = filedialog.asksaveasfilename(\n            defaultextension=\".png\",\n            filetypes=[(\"PNG files\", \"*.png\"), (\"JPEG files\", \"*.jpg\"), \n                      (\"PDF files\", \"*.pdf\"), (\"All files\", \"*.*\")],\n            title=\"Save Chart\"\n        )\n        \n        if filename:\n            try:\n                self.fig.savefig(filename, dpi=300, bbox_inches='tight')\n                messagebox.showinfo(\"Success\", f\"Chart saved as {filename}\")\n                self.update_status(f\"Chart saved to {filename}\")\n            except Exception as e:\n                messagebox.showerror(\"Save Error\", f\"Failed to save chart: {str(e)}\")\n    \n    # Reports Functions\n    def update_report_users(self):\n        \"\"\"Update the user list for reports.\"\"\"\n        records = self.bmi_engine.load_records()\n        users = ['All Users'] + sorted(list(set(r.get('name', '') for r in records if r.get('name'))))\n        self.report_user_combo['values'] = users\n        if users:\n            self.report_user_combo.set(users[0])\n    \n    def generate_report(self):\n        \"\"\"Generate the selected report type.\"\"\"\n        report_type = self.report_type_var.get()\n        user_filter = self.report_user_var.get()\n        \n        try:\n            if user_filter == 'All Users':\n                report_content = self.bmi_engine.generate_report()\n            else:\n                report_content = self.bmi_engine.generate_report(user_filter)\n            \n            # Display report\n            self.report_text.configure(state='normal')\n            self.report_text.delete('1.0', tk.END)\n            self.report_text.insert('1.0', report_content)\n            self.report_text.configure(state='disabled')\n            \n            self.update_status(f\"Generated {report_type}\")\n            \n        except Exception as e:\n            messagebox.showerror(\"Report Error\", f\"Failed to generate report: {str(e)}\")\n    \n    def save_report(self):\n        \"\"\"Save the current report.\"\"\"\n        content = self.report_text.get('1.0', tk.END).strip()\n        if not content:\n            messagebox.showwarning(\"No Report\", \"Please generate a report first.\")\n            return\n        \n        filename = filedialog.asksaveasfilename(\n            defaultextension=\".txt\",\n            filetypes=[(\"Text files\", \"*.txt\"), (\"All files\", \"*.*\")],\n            title=\"Save Report\"\n        )\n        \n        if filename:\n            try:\n                with open(filename, 'w', encoding='utf-8') as f:\n                    f.write(content)\n                messagebox.showinfo(\"Success\", f\"Report saved as {filename}\")\n                self.update_status(f\"Report saved to {filename}\")\n            except Exception as e:\n                messagebox.showerror(\"Save Error\", f\"Failed to save report: {str(e)}\")\n    \n    def email_report(self):\n        \"\"\"Email the current report (placeholder).\"\"\"\n        messagebox.showinfo(\"Email Report\", \"Email functionality will be implemented in a future version.\")\n        self.update_status(\"Email functionality coming soon\")\n    \n    def print_report(self):\n        \"\"\"Print the current report (placeholder).\"\"\"\n        messagebox.showinfo(\"Print Report\", \"Print functionality will be implemented in a future version.\")\n        self.update_status(\"Print functionality coming soon\")\n\n\ndef main():\n    \"\"\"Main function to run the application.\"\"\"\n    root = tk.Tk()\n    app = BMICalculatorProGUI(root)\n    \n    try:\n        root.mainloop()\n    except KeyboardInterrupt:\n        print(\"\\nApplication closed by user.\")\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()